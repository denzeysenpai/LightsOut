c# >> $$.run


using System;
using System.IO;
using System.Security.Cryptography;

public class FileHider
{
    public static void HideFile(string filePath)
    {
        File.SetAttributes(filePath, File.GetAttributes(filePath) | FileAttributes.Hidden);
        Console.WriteLine("File is now hidden.");
    }

    public static void UnhideFile(string filePath)
    {
        File.SetAttributes(filePath, File.GetAttributes(filePath) & ~FileAttributes.Hidden);
        Console.WriteLine("File is now visible.");
    }
}


public class Program
{
    public static void Main()
    {
        string filePath = "path/to/file.txt";

        // Hide the file
        FileHider.HideFile(filePath);

        // Do other operations or logic in your program

        // Unhide the file (if needed)
        FileHider.UnhideFile(filePath);
string filePath = "path/to/file.txt";
        string data = "This is the data to be written to the file.";

        FileWriter.WriteToFile(filePath, data);
    }
}

public class FileWriter
{
    public static void WriteToFile(string filePath, string content)
    {
        using (StreamWriter writer = new StreamWriter(filePath, true))
        {
            writer.WriteLine(content);
        }
        
        Console.WriteLine("Data written to file successfully.");
    }
}


public class FileEncryption
{
    private const int BufferSize = 1048576; // 1MB

    public static void EncryptFile(string inputFile, string outputFile, string password)
    {
        using (Aes aes = Aes.Create())
        {
            byte[] passwordBytes = System.Text.Encoding.UTF8.GetBytes(password);
            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(passwordBytes, salt: new byte[0], iterations: 1000);

            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);

            using (FileStream inputFileStream = new FileStream(inputFile, FileMode.Open))
            using (FileStream outputFileStream = new FileStream(outputFile, FileMode.Create))
            using (CryptoStream cryptoStream = new CryptoStream(outputFileStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
            {
                byte[] buffer = new byte[BufferSize];
                int bytesRead;

                while ((bytesRead = inputFileStream.Read(buffer, 0, buffer.Length)) > 0)
                {
                    cryptoStream.Write(buffer, 0, bytesRead);
                }
            }
        }
    }
}

string inputFile = "path/to/input/file.txt";
string outputFile = "path/to/output/encrypted_file.txt";
string password = "myPassword123";

FileEncryption.EncryptFile(inputFile, outputFile, password);

namespace WindowsFormsApplication1
{
    public partial class Form1 : Form
    {
        [DllImport("Gdi32.dll", EntryPoint = "CreateRoundRectRgn")]
        private static extern IntPtr CreateRoundRectRgn
        (
            int nLeftRect,     // x-coordinate of upper-left corner
            int nTopRect,      // y-coordinate of upper-left corner
            int nRightRect,    // x-coordinate of lower-right corner
            int nBottomRect,   // y-coordinate of lower-right corner
            int nWidthEllipse, // width of ellipse
            int nHeightEllipse // height of ellipse
        );

        public Form1()
        {
            InitializeComponent();
            this.FormBorderStyle = FormBorderStyle.None;
            Region = System.Drawing.Region.FromHrgn(CreateRoundRectRgn(0, 0, Width, Height, 20, 20));
        }
    }
}



// char char ragd


@SEIYAMARX

AUGUST 18 2023